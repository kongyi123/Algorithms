알고리즘 Expert Certi를 준비하는 방법


알고리즘 문제해결 능력 
1. 다양한 관점으로 접근 가능
- 사전지식(내공)
- 솔루션을 빨리 찾기(발견술)

2. 잘 구현 
- 잘 구현하기 위한 사전지식(내공)
- 잘 구현하기 위한 발견술



학습 방법

1. 테스트 주도 학습
- 평가를 통해 내가 부족한 부분을 찾아서 메우는 효율적인 방법으로 학습 
- 모든 학습은 평가에 대한 합격을 기준으로 할 것 (즉, 매 학습마다 무엇이 얼마나 늘었는지 평가가 정밀하게 되어야 하는 형태가 되어야함 - 평가 방법에 따른 학습이 되어야 할 것)

2. Feedback 기반 학습
- 내가 처음 생각한 솔루션보다 어떻게든 조금이라도 더 빠른 솔루션을 낸다면? 나는 최소한 늘고 있는 것이 확실한 것 > 내가 늘고 있다는 것을 확인해가며 학습이 진행됨
>> 내가 푼 문제보다 조금이라도 더 좋은 솔루션을 찾는것은 너무너무 난이도가 높다. 그래서 혼자힘으로 하는 것은 내수준이 안맞는듯.
따라서, 이 과정은 남의 코드 혹은 솔루션을 참고하는 형태로 진행하자. 


- 1솔루션 1코딩 > 나의 공부량이 늘어나고 있는게 명확하게 확인된다. 푼 문제 수와 rating 상관관계에 따라 내가 expert의 수준이 될 양의 공부를 한 것을 간접적으로 확인 가능 
- 푼 문제를 요소단위로 분해한 다음 체계적으로 목차정리를 한다. > 문제를 풀떄마다 나의 문제풀이를 위한 내공이 늘고 있는 것이 눈으로 확인이 된다.

3. 과제 수행형 학습
- 계획된 과제 실행(단순한 과제)을 하면 실력이 늘수밖에 없는 mission 을 설계해야



빨리 성장한느 방법

1. 충분한 양을 해야한다(= 지속적으로 할 수 있어야 한다, = 재미있어야 한다) - 적절한 난이도
2. 효율적이어야 한다(= 실력향상이 충분히 빠르게 되어야한다) - 이미 잘하는 것을 하지말고 부족한 점을 채워야 한다.

실력향상이 눈에 보여야하는데...

실력향상을 바로바로 확인할 수 있는 방법이 없을까? > 대회 문제를 풀어서 rating을??




질문을 10개 이상 내야한다. 좋은 질문이 좋은 답을 제시할 수 있게 만든다.


경쟁자들을 고려했을 때, 문제를 더 잘푼다는 것은?
> 경쟁자들이 떠올리기 어려워하는 솔루션을 경쟁자들보다 빠르게 그리고 잘 떠올려야할 것.

적절한 숫자의 expert programmer를 선출하기위한 출제자의 태도는?
> 문제 풀이가 잘 알려져 있지 않아야 하고, 충분히 최적해를 생각하기 어려워야 한다. 즉, 피평가 인원이 풀기 어려워야 한다. 

풀기 어려운 문제를 푸는 연습을 하려면 어떻게 해야 할까?
> 이미 솔루션을 생각해 낸 문제에 대해, 처음 생각해 낸 솔루션을 제외 시키고 다시 문제를 풀어보는 연습을 한다. 
이건 솔루션을 생각해내기도 어렵고, 더 좋은 솔루션을 찾을 경우 경쟁자들보다 앞선다는 것이 확실해진다.

어려운 문제란 무엇인가?
> 어려운 문제는 원래 답이 잘 생각 안난다. 즉, 생각 안나는 답을 생각해내는 연습이 필요

좋은 문제란 무잇인가?
> 익스를 따는데 도움이 되는 문제

익스를 따는데 도움이 되는 문제는 무엇인가?
> 익스의 유형을 따르는 문제, 익스에서 요구하는 역량을 요구하는 문제

익스의 유형을 따르는 문제는 무엇인가?
> 익스 기출문제.

익스에서 요구하는 역량은 무엇인가?
> 뭘까... 문제해결능력(?)과 약간의 도메인 지식?? 오히려 도메인 지식의 차이는 피하려는 것 같기도 하다. 왜냐하면 도메인 지식의 차이로 풀리는 문제는
소수의 인원을 선출해야하는 출제자 입장에서는 너무 도박이다. 이건 익스 문제를 모아놓고 두고두고 고민해봐야할 듯.




어떤 알고리즘이 적용되면 풀리는 것임을 자연스럽게 파악되도록 단서를 하나씩 확정해 나가야 하는 것인가  (BFS)
아니면, 어떤 알고리즘을 가정하고 조건들을 모아 솔루션에 초점을 두고 풀이를 시도해야 하는 것인가 (DFS)
아니면 두 방법 모두 잘 활용해야하는 것인가... 어떻게 보면 둘다 같은 말인 것 같기도 하다..


스택을 접근하는 방법??
스택 감을 잡기위해서
스택문제를 많이 풀어보는 수 밖에.. 근데
어려운 스택문제를 풀면서 감을 잡을 것.
스택에 관련된 풀이법(발견술)을 충분히 찾아볼 것.

공통점과 차이점을 찾아보고
문제를 잊더라도 스택을 발견할 수 있는 발견 루틴을 정하자

- https://www.acmicpc.net/problem/3015 : 오아시스 재결합
- https://www.acmicpc.net/blog/view/12 : 히스토그램에서 가장 큰 직사각형
- https://leetcode.com/problems/longest-valid-parentheses/ 괄호문제.






2020.02.08

아 왜이렇게 알고리즘 공부하기가 싫냐..
풀었던 문제 다른 방법으로 풀려다가 도저히 더 좋은방법이 없을 것 같아서
다른 사람이 풀었던 모범 코드를 보는데,
전체적인 솔루션은 같고 세부적인것만 다른것 같은데 코드 해석이 너무 재미가 없고 지루하네 졸리고

재미없는 이유가 뭘까?

난이도가 안맞는 것인가?

피드백이 없어서 그런건가?


남들의 코드를 해석하는 과정을
단순 작업을 실행하기만 하면 자연스럽게 코드가 이해가 되도록 하는
방법론은 없을까


